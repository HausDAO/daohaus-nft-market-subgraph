// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class CloseOrder extends ethereum.Event {
  get params(): CloseOrder__Params {
    return new CloseOrder__Params(this);
  }
}

export class CloseOrder__Params {
  _event: CloseOrder;

  constructor(event: CloseOrder) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class FillOrder extends ethereum.Event {
  get params(): FillOrder__Params {
    return new FillOrder__Params(this);
  }
}

export class FillOrder__Params {
  _event: FillOrder;

  constructor(event: FillOrder) {
    this._event = event;
  }

  get payer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get nftAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get receiver(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get price(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SetNft extends ethereum.Event {
  get params(): SetNft__Params {
    return new SetNft__Params(this);
  }
}

export class SetNft__Params {
  _event: SetNft;

  constructor(event: SetNft) {
    this._event = event;
  }

  get nft(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get active(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class SetOrder extends ethereum.Event {
  get params(): SetOrder__Params {
    return new SetOrder__Params(this);
  }
}

export class SetOrder__Params {
  _event: SetOrder;

  constructor(event: SetOrder) {
    this._event = event;
  }

  get seller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get price(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get token(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get nftAddress(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get altReceiver(): Address {
    return this._event.parameters[5].value.toAddress();
  }

  get details(): string {
    return this._event.parameters[6].value.toString();
  }
}

export class SetToken extends ethereum.Event {
  get params(): SetToken__Params {
    return new SetToken__Params(this);
  }
}

export class SetToken__Params {
  _event: SetToken;

  constructor(event: SetToken) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get active(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class NftSale__ordersResult {
  value0: boolean;
  value1: boolean;
  value2: BigInt;
  value3: Address;
  value4: BigInt;
  value5: Address;
  value6: Address;
  value7: Address;
  value8: string;

  constructor(
    value0: boolean,
    value1: boolean,
    value2: BigInt,
    value3: Address,
    value4: BigInt,
    value5: Address,
    value6: Address,
    value7: Address,
    value8: string
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromBoolean(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromAddress(this.value5));
    map.set("value6", ethereum.Value.fromAddress(this.value6));
    map.set("value7", ethereum.Value.fromAddress(this.value7));
    map.set("value8", ethereum.Value.fromString(this.value8));
    return map;
  }
}

export class NftSale extends ethereum.SmartContract {
  static bind(address: Address): NftSale {
    return new NftSale("NftSale", address);
  }

  Nfts(param0: Address): boolean {
    let result = super.call("Nfts", "Nfts(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_Nfts(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("Nfts", "Nfts(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  Tokens(param0: Address): boolean {
    let result = super.call("Tokens", "Tokens(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_Tokens(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("Tokens", "Tokens(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  fee(): BigInt {
    let result = super.call("fee", "fee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_fee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("fee", "fee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  orders(param0: Address, param1: BigInt): NftSale__ordersResult {
    let result = super.call(
      "orders",
      "orders(address,uint256):(bool,bool,uint256,address,uint256,address,address,address,string)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return new NftSale__ordersResult(
      result[0].toBoolean(),
      result[1].toBoolean(),
      result[2].toBigInt(),
      result[3].toAddress(),
      result[4].toBigInt(),
      result[5].toAddress(),
      result[6].toAddress(),
      result[7].toAddress(),
      result[8].toString()
    );
  }

  try_orders(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<NftSale__ordersResult> {
    let result = super.tryCall(
      "orders",
      "orders(address,uint256):(bool,bool,uint256,address,uint256,address,address,address,string)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new NftSale__ordersResult(
        value[0].toBoolean(),
        value[1].toBoolean(),
        value[2].toBigInt(),
        value[3].toAddress(),
        value[4].toBigInt(),
        value[5].toAddress(),
        value[6].toAddress(),
        value[7].toAddress(),
        value[8].toString()
      )
    );
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CloseOrderCall extends ethereum.Call {
  get inputs(): CloseOrderCall__Inputs {
    return new CloseOrderCall__Inputs(this);
  }

  get outputs(): CloseOrderCall__Outputs {
    return new CloseOrderCall__Outputs(this);
  }
}

export class CloseOrderCall__Inputs {
  _call: CloseOrderCall;

  constructor(call: CloseOrderCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _nftAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class CloseOrderCall__Outputs {
  _call: CloseOrderCall;

  constructor(call: CloseOrderCall) {
    this._call = call;
  }
}

export class FillOrderCall extends ethereum.Call {
  get inputs(): FillOrderCall__Inputs {
    return new FillOrderCall__Inputs(this);
  }

  get outputs(): FillOrderCall__Outputs {
    return new FillOrderCall__Outputs(this);
  }
}

export class FillOrderCall__Inputs {
  _call: FillOrderCall;

  constructor(call: FillOrderCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _nftAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class FillOrderCall__Outputs {
  _call: FillOrderCall;

  constructor(call: FillOrderCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetNewOrderCall extends ethereum.Call {
  get inputs(): SetNewOrderCall__Inputs {
    return new SetNewOrderCall__Inputs(this);
  }

  get outputs(): SetNewOrderCall__Outputs {
    return new SetNewOrderCall__Outputs(this);
  }
}

export class SetNewOrderCall__Inputs {
  _call: SetNewOrderCall;

  constructor(call: SetNewOrderCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _nftAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _price(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _token(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _alternateReceiver(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get details(): string {
    return this._call.inputValues[5].value.toString();
  }
}

export class SetNewOrderCall__Outputs {
  _call: SetNewOrderCall;

  constructor(call: SetNewOrderCall) {
    this._call = call;
  }
}

export class SetdNftCall extends ethereum.Call {
  get inputs(): SetdNftCall__Inputs {
    return new SetdNftCall__Inputs(this);
  }

  get outputs(): SetdNftCall__Outputs {
    return new SetdNftCall__Outputs(this);
  }
}

export class SetdNftCall__Inputs {
  _call: SetdNftCall;

  constructor(call: SetdNftCall) {
    this._call = call;
  }

  get _nft(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _active(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetdNftCall__Outputs {
  _call: SetdNftCall;

  constructor(call: SetdNftCall) {
    this._call = call;
  }
}

export class SetdTokenCall extends ethereum.Call {
  get inputs(): SetdTokenCall__Inputs {
    return new SetdTokenCall__Inputs(this);
  }

  get outputs(): SetdTokenCall__Outputs {
    return new SetdTokenCall__Outputs(this);
  }
}

export class SetdTokenCall__Inputs {
  _call: SetdTokenCall;

  constructor(call: SetdTokenCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _active(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetdTokenCall__Outputs {
  _call: SetdTokenCall;

  constructor(call: SetdTokenCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateFeeCall extends ethereum.Call {
  get inputs(): UpdateFeeCall__Inputs {
    return new UpdateFeeCall__Inputs(this);
  }

  get outputs(): UpdateFeeCall__Outputs {
    return new UpdateFeeCall__Outputs(this);
  }
}

export class UpdateFeeCall__Inputs {
  _call: UpdateFeeCall;

  constructor(call: UpdateFeeCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateFeeCall__Outputs {
  _call: UpdateFeeCall;

  constructor(call: UpdateFeeCall) {
    this._call = call;
  }
}
